package com.company;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.function.Consumer;

public class Stack<Item> implements Iterable<Item>{

    private Node<Item> topOfStack;
    private Node<Item> bottomOfStack;
    private int size;

    private static class Node<Item>{
        private Item item;
        private Node<Item> next;
    }

    public Stack(){
        topOfStack = null;
        bottomOfStack = null;
        size = 0;
    }

    public boolean isEmpty(){
        return topOfStack == null;
    }

    public int size(){
        return size;
    }

    public void push(Item item){
        Node<Item> oldfirst = topOfStack;
        topOfStack = new Node<Item>();
        topOfStack.item = item;
        topOfStack.next = oldfirst;
        if(this.size() == 0){
            bottomOfStack = topOfStack;
        }
        size++;
    }

    public Item pop() {
        if (isEmpty()) throw new NoSuchElementException("Stack underflow");
        Item item = topOfStack.item;
        topOfStack = topOfStack.next;
        size--;
        return item;
    }

    public Item peek() {
        if (isEmpty()) throw new NoSuchElementException("Stack underflow");
        return topOfStack.item;
    }

    public boolean areOpposites(Item item1, Item item2){
        if((Character) item1 == '(' && (Character) item2 == ')' || (Character) item1 == '[' && (Character) item2 == ']' || (Character) item1 == '{' && (Character) item2 == '}'){
            return true;
        }
        return false;
    }

    public String toString(){
        StringBuilder s = new StringBuilder();
        for(Item item : this) {
            s.append("[");
            s.append(item);
            s.append("], ");
        }
        if(s.lastIndexOf(",") > 0)  {  s.deleteCharAt(s.lastIndexOf(",")); }
        return s.toString();
    }

    public Iterator<Item> iterator(){
        return new LinkedIterator(topOfStack);
    }

    private class LinkedIterator implements Iterator<Item> {
        private Node<Item> current;

        public LinkedIterator (Node<Item> first) {
            current = first;
        }

        public boolean hasNext() {
            return current != null;
        }

        public void remove() {
            throw new UnsupportedOperationException();
        }

        public Item next() {
            if(!hasNext()) throw new NoSuchElementException();
            Item item = current.item;
            current = current.next;
            return item;
        }

    }
}
